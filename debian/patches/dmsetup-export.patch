--- a/tools/dmsetup.c
+++ b/tools/dmsetup.c
@@ -1333,6 +1333,82 @@
 	return r;
 }
 
+/*
+ * Export device infos
+ */
+static int _export(int argc, char **argv, void *data)
+{
+	int r = 0;
+	struct dm_task *dmt;
+	const char *name = NULL;
+	const char *uuid;
+	struct dm_info info;
+	void *next = NULL;
+	uint64_t start, length;
+	char *target_type;
+	char *params;
+
+	if (argc == 1 && !_switches[UUID_ARG] && !_switches[MAJOR_ARG])
+		return 0;
+	if (argc == 2)
+		name = argv[1];
+
+	if (!(dmt = dm_task_create(DM_DEVICE_STATUS)))
+		return 0;
+
+	if (!_set_task_device(dmt, name, 0))
+		goto out;
+
+	if (!dm_task_no_open_count(dmt))
+		goto out;
+
+	if (!dm_task_run(dmt))
+		goto out;
+
+	if (!dm_task_get_info(dmt, &info) || !info.exists)
+		goto out;
+
+	printf("DM_NAME=\"%s\"\n", dm_task_get_name(dmt));
+
+	printf("DM_STATE=%s\n", info.suspended ? "SUSPENDED" : "ACTIVE");
+	if (!info.suspended)
+		printf("DM_STATE_ACTIVE=1\n");
+	if (info.read_only)
+		printf("DM_STATE_READONLY=1\n");
+	if (info.live_table)
+		printf("DM_TABLE_LIVE=1\n");
+	if (info.inactive_table)
+		printf("DM_TABLE_INACTIVE=1\n");
+
+	printf("DM_LAST_EVENT_NR=%" PRIu32 "\n", info.event_nr);
+	printf("DM_MAJOR=%d\n", info.major);
+	printf("DM_MINOR=%d\n", info.minor);
+
+	if (info.target_count != -1)
+		printf("DM_TARGET_COUNT=%d\n", info.target_count);
+
+	next = dm_get_next_target(dmt, next, &start, &length, &target_type, &params);
+	if (target_type) {
+		printf("DM_TARGET_TYPES=%s", target_type);
+		while (next) {
+			next = dm_get_next_target(dmt, next, &start, &length,
+						  &target_type, &params);
+			if (target_type)
+				printf(",%s", target_type);
+		}
+		printf("\n");
+	}
+
+	if ((uuid = dm_task_get_uuid(dmt)) && *uuid)
+		printf("DM_UUID=\"%s\"\n", uuid);
+
+	r = 1;
+
+      out:
+	dm_task_destroy(dmt);
+	return r;
+}
+
 /* Show target names and their version numbers */
 static int _targets(int argc __attribute((unused)), char **argv __attribute((unused)), void *data __attribute((unused)))
 {
@@ -2434,6 +2510,7 @@
 	{"version", "", 0, 0, _version},
 	{"setgeometry", "<device> <cyl> <head> <sect> <start>", 5, 5, _setgeometry},
 	{"splitname", "<device> [<subsystem>]", 1, 2, _splitname},
+	{"export", "<device> | -j|--major <major> -m|--minor <minor>", 0, 1, _export},
 	{NULL, NULL, 0, 0, NULL}
 };
 
